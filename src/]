const storage = require("@/utils/appStorage.js");

function computeAverage(arr) {
  return arr.reduce((a, b) => a + b, 0) / 5;
}

function formatTime(value) {
  let seconds = parseInt(value / 1000).toString();
  let minutes = parseInt(value / 60000).toString();
  let milliseconds = parseInt(
    value - minutes * 60000 - seconds * 1000
  ).toString();

  if (minutes.length < 2) minutes = "0" + minutes;
  if (seconds.length < 2) seconds = "0" + seconds;
  if (milliseconds.length < 3) milliseconds = "0" + milliseconds;

  return `${minutes}:${seconds}.${milliseconds.substr(0, 2)}`;
}

function getDateStr(date) {
  let day = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();
  return `${year}-${month}-${day}`;
}

function extractDateStr(str) {
  return str.substr(0, str.indexOf("T"));
}

// function last7Dates() {
//   let dates = [];
//   for (let i = 0; i <= 7; i++) {
//     let date = new Date();
//     date.setDate(date.getDate() - i);
//     dates.push(getDateStr(date));
//   }
//   return dates;
// }

function getAvg(timeframe) {
  let stats = storage.load("user_data/stats.json");

  if (timeframe === "daily") {
    return computeDailyAvg(stats);
  } else if (timeframe === "weekly") {
    return computeWeeklyAvg(stats);
  } else if (timeframe === "monthly") {
    return computeMonthlyAvg();
  } else if (timeframe === "past5") {
    return computeAvgOfPast5(stats);
  } else {
    return "N/A";
  }
}

function computeDailyAvg(stats) {
  let todaysSolveTimes = [];
  let today = new Date();
  stats.history.find(stat => {
    if (stat.date.substr(0, 10) === getDateStr(today)) {
      todaysSolveTimes.push(stat.solve_time_value);
    }
  });

  let dailyAvg = computeAverage(todaysSolveTimes);
  return formatTime(dailyAvg);
}

function dateDifference(a, b) {
  const MS_PER_DAY = 1000 * 60 * 60 * 24;
  const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
  const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());
  return Math.floor((utcB - utcA) / MS_PER_DAY);
}

function dateIsValid(otherDate, diffMax) {
  let today = new Date();
  let otherDay = extractDateStr(otherDate);
  console.log(today, otherDay);

  let dateDiff = dateDifference(today, new Date(otherDay));
  return Math.abs(dateDiff < diffMax);
}

function computeWeeklyAvg(stats) {
  let weeklySolveTimes = [];

  for (let i = stats.history.length - 1; i > 0; i--) {
    if (dateIsValid(stats.history[i].date, 8)) {
      weeklySolveTimes.push(stats.history[i].solve_time_value);
    } else {
      break;
    }
  }

  console.log(weeklySolveTimes);

  let weeklyAvg = computeAverage(weeklySolveTimes);
  return formatTime(weeklyAvg);
  //let dates = last7Dates();
  // dates.forEach(date => {
  //   let solveTimes = [];
  //   stats.history.find(stat => {
  //     if (extractDateStr(stat.date) === date) {
  //       solveTimes.push(stat.solve_time_value);
  //     }
  //   });

  //   if (solveTimes.length > 1) {
  //     let avg = computeAverage(solveTimes);
  //     weeklySolveTimes.push(avg);
  //   } else {
  //     weeklySolveTimes.push(solveTimes[0]);
  //   }
  // });

  // weeklySolveTimes = weeklySolveTimes.filter(solveTime => {
  //   return solveTime != undefined;
  // });

  // let weeklyAvg = computeAverage(weeklySolveTimes);
}

function computeMonthlyAvg() {
  return 0;
}

function computeAvgOfPast5(stats) {
  let historyLength = stats.history.length;
  if (historyLength < 5) {
    return "N/A";
  }

  let past5 = stats.history.slice(historyLength - 5, historyLength);
  let solveTimes = past5.map(obj => obj.solve_time_value);

  let average = computeAverage(solveTimes);
  return formatTime(average);
}

function getBestTime() {
  let stats = storage.load("user_data/stats.json");
  return stats.best_time;
}

export default {
  getBestTime,
  getAvg
};
